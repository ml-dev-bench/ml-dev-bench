Task: Implement Monte Carlo Tree Search (MCTS) Algorithm

Your task is to implement a single-player Monte Carlo Tree Search (MCTS) algorithm in Python. The implementation should be done in the `mcts.py` file, which will be tested using the provided `test_mcts.py`.

Background:
Monte Carlo Tree Search is a heuristic search algorithm commonly used in decision-making processes and game playing. It combines tree search with random sampling of the decision space to find optimal decisions. The algorithm is particularly useful in scenarios with large state spaces where traditional exhaustive search methods are impractical.

Requirements:

1. Implement the MCTS algorithm with the following core components:

   a) Node class that represents a state in the search tree with:
      - State representation
      - Parent and children nodes
      - Visit count
      - Total reward/value
      - Untried actions
      - Player to move (if relevant)

   b) MCTS class with the following methods:
      - search(state) - Main search method that returns the best action
      - select_node() - Selection phase using UCT formula
      - expand_node(node) - Expansion phase
      - simulate(state) - Simulation/rollout phase
      - backpropagate(node, reward) - Backpropagation phase
      - get_best_action() - Returns the best action based on search results

2. Implementation Requirements:
   - Use UCT (Upper Confidence Bound for Trees) formula for node selection
   - Implement proper state management and cloning
   - Handle terminal states correctly
   - Support customizable number of iterations/time limit for search
   - Implement proper resource cleanup

3. The implementation should be:
   - Well-documented with docstrings and comments
   - Type-hinted for better code clarity
   - Efficient and follow Python best practices
   - Modular and easily extendable

4. Your implementation will be tested against various scenarios including:
   - Simple game environments
   - Path finding problems
   - Decision trees with varying depths
   - Different reward structures
   - Performance under time constraints

Example Usage:
```python
# Initialize MCTS with a root state
mcts = MCTS()

# Perform search to find best action
best_action = mcts.search(initial_state)

# Get statistics about the search
stats = mcts.get_statistics()
```

The tests will verify:
1. Correct implementation of all MCTS phases
2. Proper handling of state transitions
3. Accuracy of UCT calculations
4. Performance within reasonable time bounds
5. Memory efficiency
6. Correct handling of terminal states
7. Proper backpropagation of rewards

Additional Notes:
- The implementation should be deterministic when using a fixed random seed
- The code should handle edge cases gracefully
- The implementation should be compatible with Python 3.7+
- All dependencies should be clearly specified
- Error handling should be robust and informative

Your implementation will be evaluated based on:
1. Correctness of the MCTS algorithm implementation
2. Code quality and organization
3. Performance and efficiency
4. Test coverage and passing all test cases
5. Documentation quality 